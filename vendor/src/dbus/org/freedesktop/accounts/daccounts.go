/*This file is automatically generated by pkg.deepin.io/dbus-generator. Don't edit it*/
package accounts

import "pkg.deepin.io/lib/dbus"
import "pkg.deepin.io/lib/dbus/property"
import "reflect"
import "sync"
import "runtime"
import "fmt"
import "errors"

/*prevent compile error*/
var _ = fmt.Println
var _ = runtime.SetFinalizer
var _ = sync.NewCond
var _ = reflect.TypeOf
var _ = property.BaseObserver{}

type Accounts struct {
	Path     dbus.ObjectPath
	DestName string
	core     *dbus.Object

	signals       map[<-chan *dbus.Signal]struct{}
	signalsLocker sync.Mutex

	DaemonVersion *dbusPropertyAccountsDaemonVersion
}

func (obj *Accounts) _createSignalChan() <-chan *dbus.Signal {
	obj.signalsLocker.Lock()
	ch := getBus().Signal()
	obj.signals[ch] = struct{}{}
	obj.signalsLocker.Unlock()
	return ch
}
func (obj *Accounts) _deleteSignalChan(ch <-chan *dbus.Signal) {
	obj.signalsLocker.Lock()
	delete(obj.signals, ch)
	getBus().DetachSignal(ch)
	obj.signalsLocker.Unlock()
}
func DestroyAccounts(obj *Accounts) {
	obj.signalsLocker.Lock()
	defer obj.signalsLocker.Unlock()
	if obj.signals == nil {
		return
	}
	for ch, _ := range obj.signals {
		getBus().DetachSignal(ch)
	}
	obj.signals = nil

	runtime.SetFinalizer(obj, nil)

	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='org.freedesktop.DBus.Properties',sender='" + obj.DestName + "',member='PropertiesChanged'")
	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='org.freedesktop.Accounts',sender='" + obj.DestName + "',member='PropertiesChanged'")

	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='org.freedesktop.Accounts',sender='" + obj.DestName + "',member='UserAdded'")

	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='org.freedesktop.Accounts',sender='" + obj.DestName + "',member='UserDeleted'")

	obj.DaemonVersion.Reset()
}

func (obj *Accounts) ListCachedUsers() (users []dbus.ObjectPath, _err error) {
	_err = obj.core.Call("org.freedesktop.Accounts.ListCachedUsers", 0).Store(&users)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Accounts) FindUserById(id int64) (user dbus.ObjectPath, _err error) {
	_err = obj.core.Call("org.freedesktop.Accounts.FindUserById", 0, id).Store(&user)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Accounts) FindUserByName(name string) (user dbus.ObjectPath, _err error) {
	_err = obj.core.Call("org.freedesktop.Accounts.FindUserByName", 0, name).Store(&user)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Accounts) CreateUser(name string, fullname string, accountType int32) (user dbus.ObjectPath, _err error) {
	_err = obj.core.Call("org.freedesktop.Accounts.CreateUser", 0, name, fullname, accountType).Store(&user)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Accounts) CacheUser(name string) (user dbus.ObjectPath, _err error) {
	_err = obj.core.Call("org.freedesktop.Accounts.CacheUser", 0, name).Store(&user)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Accounts) UncacheUser(name string) (_err error) {
	_err = obj.core.Call("org.freedesktop.Accounts.UncacheUser", 0, name).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Accounts) DeleteUser(id int64, removeFiles bool) (_err error) {
	_err = obj.core.Call("org.freedesktop.Accounts.DeleteUser", 0, id, removeFiles).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Accounts) ConnectUserAdded(callback func(user dbus.ObjectPath)) func() {
	sigChan := obj._createSignalChan()
	go func() {
		for v := range sigChan {
			if v.Path != obj.Path || v.Name != "org.freedesktop.Accounts.UserAdded" || 1 != len(v.Body) {
				continue
			}
			if reflect.TypeOf(v.Body[0]) != reflect.TypeOf((*dbus.ObjectPath)(nil)).Elem() {
				continue
			}

			callback(v.Body[0].(dbus.ObjectPath))
		}
	}()
	return func() {
		obj._deleteSignalChan(sigChan)
	}
}

func (obj *Accounts) ConnectUserDeleted(callback func(user dbus.ObjectPath)) func() {
	sigChan := obj._createSignalChan()
	go func() {
		for v := range sigChan {
			if v.Path != obj.Path || v.Name != "org.freedesktop.Accounts.UserDeleted" || 1 != len(v.Body) {
				continue
			}
			if reflect.TypeOf(v.Body[0]) != reflect.TypeOf((*dbus.ObjectPath)(nil)).Elem() {
				continue
			}

			callback(v.Body[0].(dbus.ObjectPath))
		}
	}()
	return func() {
		obj._deleteSignalChan(sigChan)
	}
}

type dbusPropertyAccountsDaemonVersion struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyAccountsDaemonVersion) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.Accounts.DaemonVersion is not writable")
}

func (this *dbusPropertyAccountsDaemonVersion) Get() string {
	v, _ := this.GetValue()
	return v.(string)
}
func (this *dbusPropertyAccountsDaemonVersion) GetValue() (interface{} /*string*/, error) {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.Accounts", "DaemonVersion").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string), nil
	}
	return *new(string), err
}
func (this *dbusPropertyAccountsDaemonVersion) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

func NewAccounts(destName string, path dbus.ObjectPath) (*Accounts, error) {
	if !path.IsValid() {
		return nil, errors.New("The path of '" + string(path) + "' is invalid.")
	}

	core := getBus().Object(destName, path)

	obj := &Accounts{Path: path, DestName: destName, core: core, signals: make(map[<-chan *dbus.Signal]struct{})}

	obj.DaemonVersion = &dbusPropertyAccountsDaemonVersion{&property.BaseObserver{}, core}

	dbusAddMatch("type='signal',path='" + string(path) + "',interface='org.freedesktop.DBus.Properties',sender='" + destName + "',member='PropertiesChanged'")
	dbusAddMatch("type='signal',path='" + string(path) + "',interface='org.freedesktop.Accounts',sender='" + destName + "',member='PropertiesChanged'")
	sigChan := obj._createSignalChan()
	go func() {
		typeString := reflect.TypeOf("")
		typeKeyValues := reflect.TypeOf(map[string]dbus.Variant{})
		typeArrayValues := reflect.TypeOf([]string{})
		for v := range sigChan {
			if v.Name == "org.freedesktop.DBus.Properties.PropertiesChanged" &&
				len(v.Body) == 3 &&
				reflect.TypeOf(v.Body[0]) == typeString &&
				reflect.TypeOf(v.Body[1]) == typeKeyValues &&
				reflect.TypeOf(v.Body[2]) == typeArrayValues &&
				v.Body[0].(string) == "org.freedesktop.Accounts" {
				props := v.Body[1].(map[string]dbus.Variant)
				for key, _ := range props {
					if false {
					} else if key == "DaemonVersion" {
						obj.DaemonVersion.Notify()
					}
				}
			} else if v.Name == "org.freedesktop.Accounts.PropertiesChanged" && len(v.Body) == 1 && reflect.TypeOf(v.Body[0]) == typeKeyValues {
				for key, _ := range v.Body[0].(map[string]dbus.Variant) {
					if false {
					} else if key == "DaemonVersion" {
						obj.DaemonVersion.Notify()
					}
				}
			}
		}
	}()

	dbusAddMatch("type='signal',path='" + string(obj.Path) + "',interface='org.freedesktop.Accounts',sender='" + obj.DestName + "',member='UserAdded'")

	dbusAddMatch("type='signal',path='" + string(obj.Path) + "',interface='org.freedesktop.Accounts',sender='" + obj.DestName + "',member='UserDeleted'")

	runtime.SetFinalizer(obj, func(_obj *Accounts) { DestroyAccounts(_obj) })
	return obj, nil
}
