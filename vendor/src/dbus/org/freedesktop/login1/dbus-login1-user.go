/*This file is automatically generated by pkg.deepin.io/dbus-generator. Don't edit it*/
package login1

import "pkg.deepin.io/lib/dbus"
import "pkg.deepin.io/lib/dbus/property"
import "reflect"
import "sync"
import "runtime"
import "fmt"
import "errors"

/*prevent compile error*/
var _ = fmt.Println
var _ = runtime.SetFinalizer
var _ = sync.NewCond
var _ = reflect.TypeOf
var _ = property.BaseObserver{}

type User struct {
	Path     dbus.ObjectPath
	DestName string
	core     *dbus.Object

	signals       map[<-chan *dbus.Signal]struct{}
	signalsLocker sync.Mutex

	UID                    *dbusPropertyUserUID
	GID                    *dbusPropertyUserGID
	Name                   *dbusPropertyUserName
	Timestamp              *dbusPropertyUserTimestamp
	TimestampMonotonic     *dbusPropertyUserTimestampMonotonic
	RuntimePath            *dbusPropertyUserRuntimePath
	DefaultControlGroup    *dbusPropertyUserDefaultControlGroup
	Service                *dbusPropertyUserService
	Display                *dbusPropertyUserDisplay
	State                  *dbusPropertyUserState
	Sessions               *dbusPropertyUserSessions
	IdleHint               *dbusPropertyUserIdleHint
	IdleSinceHint          *dbusPropertyUserIdleSinceHint
	IdleSinceHintMonotonic *dbusPropertyUserIdleSinceHintMonotonic
}

func (obj *User) _createSignalChan() <-chan *dbus.Signal {
	obj.signalsLocker.Lock()
	ch := getBus().Signal()
	obj.signals[ch] = struct{}{}
	obj.signalsLocker.Unlock()
	return ch
}
func (obj *User) _deleteSignalChan(ch <-chan *dbus.Signal) {
	obj.signalsLocker.Lock()
	delete(obj.signals, ch)
	getBus().DetachSignal(ch)
	obj.signalsLocker.Unlock()
}
func DestroyUser(obj *User) {
	obj.signalsLocker.Lock()
	for ch, _ := range obj.signals {
		getBus().DetachSignal(ch)
	}
	obj.signalsLocker.Unlock()

	obj.UID.Reset()
	obj.GID.Reset()
	obj.Name.Reset()
	obj.Timestamp.Reset()
	obj.TimestampMonotonic.Reset()
	obj.RuntimePath.Reset()
	obj.DefaultControlGroup.Reset()
	obj.Service.Reset()
	obj.Display.Reset()
	obj.State.Reset()
	obj.Sessions.Reset()
	obj.IdleHint.Reset()
	obj.IdleSinceHint.Reset()
	obj.IdleSinceHintMonotonic.Reset()
}

func (obj *User) Terminate() (_err error) {
	_err = obj.core.Call("org.freedesktop.login1.User.Terminate", 0).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *User) Kill(signal string) (_err error) {
	_err = obj.core.Call("org.freedesktop.login1.User.Kill", 0, signal).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

type dbusPropertyUserUID struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserUID) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.UID is not writable")
}

func (this *dbusPropertyUserUID) Get() uint32 {
	return this.GetValue().(uint32)
}
func (this *dbusPropertyUserUID) GetValue() interface{} /*uint32*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "UID").Store(&r)
	if err == nil && r.Signature().String() == "u" {
		return r.Value().(uint32)
	} else {
		fmt.Println("dbusProperty:UID error:", err, "at org.freedesktop.login1.User")
		return *new(uint32)
	}
}
func (this *dbusPropertyUserUID) GetType() reflect.Type {
	return reflect.TypeOf((*uint32)(nil)).Elem()
}

type dbusPropertyUserGID struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserGID) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.GID is not writable")
}

func (this *dbusPropertyUserGID) Get() uint32 {
	return this.GetValue().(uint32)
}
func (this *dbusPropertyUserGID) GetValue() interface{} /*uint32*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "GID").Store(&r)
	if err == nil && r.Signature().String() == "u" {
		return r.Value().(uint32)
	} else {
		fmt.Println("dbusProperty:GID error:", err, "at org.freedesktop.login1.User")
		return *new(uint32)
	}
}
func (this *dbusPropertyUserGID) GetType() reflect.Type {
	return reflect.TypeOf((*uint32)(nil)).Elem()
}

type dbusPropertyUserName struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserName) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.Name is not writable")
}

func (this *dbusPropertyUserName) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyUserName) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "Name").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:Name error:", err, "at org.freedesktop.login1.User")
		return *new(string)
	}
}
func (this *dbusPropertyUserName) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyUserTimestamp struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserTimestamp) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.Timestamp is not writable")
}

func (this *dbusPropertyUserTimestamp) Get() uint64 {
	return this.GetValue().(uint64)
}
func (this *dbusPropertyUserTimestamp) GetValue() interface{} /*uint64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "Timestamp").Store(&r)
	if err == nil && r.Signature().String() == "t" {
		return r.Value().(uint64)
	} else {
		fmt.Println("dbusProperty:Timestamp error:", err, "at org.freedesktop.login1.User")
		return *new(uint64)
	}
}
func (this *dbusPropertyUserTimestamp) GetType() reflect.Type {
	return reflect.TypeOf((*uint64)(nil)).Elem()
}

type dbusPropertyUserTimestampMonotonic struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserTimestampMonotonic) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.TimestampMonotonic is not writable")
}

func (this *dbusPropertyUserTimestampMonotonic) Get() uint64 {
	return this.GetValue().(uint64)
}
func (this *dbusPropertyUserTimestampMonotonic) GetValue() interface{} /*uint64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "TimestampMonotonic").Store(&r)
	if err == nil && r.Signature().String() == "t" {
		return r.Value().(uint64)
	} else {
		fmt.Println("dbusProperty:TimestampMonotonic error:", err, "at org.freedesktop.login1.User")
		return *new(uint64)
	}
}
func (this *dbusPropertyUserTimestampMonotonic) GetType() reflect.Type {
	return reflect.TypeOf((*uint64)(nil)).Elem()
}

type dbusPropertyUserRuntimePath struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserRuntimePath) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.RuntimePath is not writable")
}

func (this *dbusPropertyUserRuntimePath) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyUserRuntimePath) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "RuntimePath").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:RuntimePath error:", err, "at org.freedesktop.login1.User")
		return *new(string)
	}
}
func (this *dbusPropertyUserRuntimePath) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyUserDefaultControlGroup struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserDefaultControlGroup) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.DefaultControlGroup is not writable")
}

func (this *dbusPropertyUserDefaultControlGroup) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyUserDefaultControlGroup) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "DefaultControlGroup").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:DefaultControlGroup error:", err, "at org.freedesktop.login1.User")
		return *new(string)
	}
}
func (this *dbusPropertyUserDefaultControlGroup) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyUserService struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserService) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.Service is not writable")
}

func (this *dbusPropertyUserService) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyUserService) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "Service").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:Service error:", err, "at org.freedesktop.login1.User")
		return *new(string)
	}
}
func (this *dbusPropertyUserService) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyUserDisplay struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserDisplay) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.Display is not writable")
}

func (this *dbusPropertyUserDisplay) Get() []interface{} {
	return this.GetValue().([]interface{})
}
func (this *dbusPropertyUserDisplay) GetValue() interface{} /*[]interface {}*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "Display").Store(&r)
	if err == nil && r.Signature().String() == "(so)" {
		return r.Value().([]interface{})
	} else {
		fmt.Println("dbusProperty:Display error:", err, "at org.freedesktop.login1.User")
		return *new([]interface{})
	}
}
func (this *dbusPropertyUserDisplay) GetType() reflect.Type {
	return reflect.TypeOf((*[]interface{})(nil)).Elem()
}

type dbusPropertyUserState struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserState) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.State is not writable")
}

func (this *dbusPropertyUserState) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyUserState) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "State").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:State error:", err, "at org.freedesktop.login1.User")
		return *new(string)
	}
}
func (this *dbusPropertyUserState) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyUserSessions struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserSessions) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.Sessions is not writable")
}

func (this *dbusPropertyUserSessions) Get() [][]interface{} {
	return this.GetValue().([][]interface{})
}
func (this *dbusPropertyUserSessions) GetValue() interface{} /*[][]interface {}*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "Sessions").Store(&r)
	if err == nil && r.Signature().String() == "a(so)" {
		return r.Value().([][]interface{})
	} else {
		fmt.Println("dbusProperty:Sessions error:", err, "at org.freedesktop.login1.User")
		return *new([][]interface{})
	}
}
func (this *dbusPropertyUserSessions) GetType() reflect.Type {
	return reflect.TypeOf((*[][]interface{})(nil)).Elem()
}

type dbusPropertyUserIdleHint struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserIdleHint) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.IdleHint is not writable")
}

func (this *dbusPropertyUserIdleHint) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyUserIdleHint) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "IdleHint").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:IdleHint error:", err, "at org.freedesktop.login1.User")
		return *new(bool)
	}
}
func (this *dbusPropertyUserIdleHint) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

type dbusPropertyUserIdleSinceHint struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserIdleSinceHint) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.IdleSinceHint is not writable")
}

func (this *dbusPropertyUserIdleSinceHint) Get() uint64 {
	return this.GetValue().(uint64)
}
func (this *dbusPropertyUserIdleSinceHint) GetValue() interface{} /*uint64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "IdleSinceHint").Store(&r)
	if err == nil && r.Signature().String() == "t" {
		return r.Value().(uint64)
	} else {
		fmt.Println("dbusProperty:IdleSinceHint error:", err, "at org.freedesktop.login1.User")
		return *new(uint64)
	}
}
func (this *dbusPropertyUserIdleSinceHint) GetType() reflect.Type {
	return reflect.TypeOf((*uint64)(nil)).Elem()
}

type dbusPropertyUserIdleSinceHintMonotonic struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUserIdleSinceHintMonotonic) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.login1.User.IdleSinceHintMonotonic is not writable")
}

func (this *dbusPropertyUserIdleSinceHintMonotonic) Get() uint64 {
	return this.GetValue().(uint64)
}
func (this *dbusPropertyUserIdleSinceHintMonotonic) GetValue() interface{} /*uint64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.login1.User", "IdleSinceHintMonotonic").Store(&r)
	if err == nil && r.Signature().String() == "t" {
		return r.Value().(uint64)
	} else {
		fmt.Println("dbusProperty:IdleSinceHintMonotonic error:", err, "at org.freedesktop.login1.User")
		return *new(uint64)
	}
}
func (this *dbusPropertyUserIdleSinceHintMonotonic) GetType() reflect.Type {
	return reflect.TypeOf((*uint64)(nil)).Elem()
}

func NewUser(destName string, path dbus.ObjectPath) (*User, error) {
	if !path.IsValid() {
		return nil, errors.New("The path of '" + string(path) + "' is invalid.")
	}

	core := getBus().Object(destName, path)

	obj := &User{Path: path, DestName: destName, core: core, signals: make(map[<-chan *dbus.Signal]struct{})}

	obj.UID = &dbusPropertyUserUID{&property.BaseObserver{}, core}
	obj.GID = &dbusPropertyUserGID{&property.BaseObserver{}, core}
	obj.Name = &dbusPropertyUserName{&property.BaseObserver{}, core}
	obj.Timestamp = &dbusPropertyUserTimestamp{&property.BaseObserver{}, core}
	obj.TimestampMonotonic = &dbusPropertyUserTimestampMonotonic{&property.BaseObserver{}, core}
	obj.RuntimePath = &dbusPropertyUserRuntimePath{&property.BaseObserver{}, core}
	obj.DefaultControlGroup = &dbusPropertyUserDefaultControlGroup{&property.BaseObserver{}, core}
	obj.Service = &dbusPropertyUserService{&property.BaseObserver{}, core}
	obj.Display = &dbusPropertyUserDisplay{&property.BaseObserver{}, core}
	obj.State = &dbusPropertyUserState{&property.BaseObserver{}, core}
	obj.Sessions = &dbusPropertyUserSessions{&property.BaseObserver{}, core}
	obj.IdleHint = &dbusPropertyUserIdleHint{&property.BaseObserver{}, core}
	obj.IdleSinceHint = &dbusPropertyUserIdleSinceHint{&property.BaseObserver{}, core}
	obj.IdleSinceHintMonotonic = &dbusPropertyUserIdleSinceHintMonotonic{&property.BaseObserver{}, core}

	getBus().BusObject().Call("org.freedesktop.DBus.AddMatch", 0, "type='signal',path='"+string(path)+"',interface='org.freedesktop.DBus.Properties',sender='"+destName+"',member='PropertiesChanged'")
	getBus().BusObject().Call("org.freedesktop.DBus.AddMatch", 0, "type='signal',path='"+string(path)+"',interface='org.freedesktop.login1.User',sender='"+destName+"',member='PropertiesChanged'")
	sigChan := obj._createSignalChan()
	go func() {
		typeString := reflect.TypeOf("")
		typeKeyValues := reflect.TypeOf(map[string]dbus.Variant{})
		typeArrayValues := reflect.TypeOf([]string{})
		for v := range sigChan {
			if v.Name == "org.freedesktop.DBus.Properties.PropertiesChanged" &&
				len(v.Body) == 3 &&
				reflect.TypeOf(v.Body[0]) == typeString &&
				reflect.TypeOf(v.Body[1]) == typeKeyValues &&
				reflect.TypeOf(v.Body[2]) == typeArrayValues &&
				v.Body[0].(string) == "org.freedesktop.login1.User" {
				props := v.Body[1].(map[string]dbus.Variant)
				for key, _ := range props {
					if false {
					} else if key == "UID" {
						obj.UID.Notify()

					} else if key == "GID" {
						obj.GID.Notify()

					} else if key == "Name" {
						obj.Name.Notify()

					} else if key == "Timestamp" {
						obj.Timestamp.Notify()

					} else if key == "TimestampMonotonic" {
						obj.TimestampMonotonic.Notify()

					} else if key == "RuntimePath" {
						obj.RuntimePath.Notify()

					} else if key == "DefaultControlGroup" {
						obj.DefaultControlGroup.Notify()

					} else if key == "Service" {
						obj.Service.Notify()

					} else if key == "Display" {
						obj.Display.Notify()

					} else if key == "State" {
						obj.State.Notify()

					} else if key == "Sessions" {
						obj.Sessions.Notify()

					} else if key == "IdleHint" {
						obj.IdleHint.Notify()

					} else if key == "IdleSinceHint" {
						obj.IdleSinceHint.Notify()

					} else if key == "IdleSinceHintMonotonic" {
						obj.IdleSinceHintMonotonic.Notify()
					}
				}
			} else if v.Name == "org.freedesktop.login1.User.PropertiesChanged" && len(v.Body) == 1 && reflect.TypeOf(v.Body[0]) == typeKeyValues {
				for key, _ := range v.Body[0].(map[string]dbus.Variant) {
					if false {
					} else if key == "UID" {
						obj.UID.Notify()

					} else if key == "GID" {
						obj.GID.Notify()

					} else if key == "Name" {
						obj.Name.Notify()

					} else if key == "Timestamp" {
						obj.Timestamp.Notify()

					} else if key == "TimestampMonotonic" {
						obj.TimestampMonotonic.Notify()

					} else if key == "RuntimePath" {
						obj.RuntimePath.Notify()

					} else if key == "DefaultControlGroup" {
						obj.DefaultControlGroup.Notify()

					} else if key == "Service" {
						obj.Service.Notify()

					} else if key == "Display" {
						obj.Display.Notify()

					} else if key == "State" {
						obj.State.Notify()

					} else if key == "Sessions" {
						obj.Sessions.Notify()

					} else if key == "IdleHint" {
						obj.IdleHint.Notify()

					} else if key == "IdleSinceHint" {
						obj.IdleSinceHint.Notify()

					} else if key == "IdleSinceHintMonotonic" {
						obj.IdleSinceHintMonotonic.Notify()
					}
				}
			}
		}
	}()

	runtime.SetFinalizer(obj, func(_obj *User) { DestroyUser(_obj) })
	return obj, nil
}
