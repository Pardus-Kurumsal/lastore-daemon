/*This file is automatically generated by pkg.deepin.io/dbus-generator. Don't edit it*/
package upower

import "pkg.deepin.io/lib/dbus"
import "pkg.deepin.io/lib/dbus/property"
import "reflect"
import "sync"
import "runtime"
import "fmt"
import "errors"

/*prevent compile error*/
var _ = fmt.Println
var _ = runtime.SetFinalizer
var _ = sync.NewCond
var _ = reflect.TypeOf
var _ = property.BaseObserver{}

type Device struct {
	Path     dbus.ObjectPath
	DestName string
	core     *dbus.Object

	signals       map[<-chan *dbus.Signal]struct{}
	signalsLocker sync.Mutex

	IconName         *dbusPropertyDeviceIconName
	WarningLevel     *dbusPropertyDeviceWarningLevel
	Technology       *dbusPropertyDeviceTechnology
	Capacity         *dbusPropertyDeviceCapacity
	IsRechargeable   *dbusPropertyDeviceIsRechargeable
	State            *dbusPropertyDeviceState
	IsPresent        *dbusPropertyDeviceIsPresent
	Temperature      *dbusPropertyDeviceTemperature
	Percentage       *dbusPropertyDevicePercentage
	TimeToFull       *dbusPropertyDeviceTimeToFull
	TimeToEmpty      *dbusPropertyDeviceTimeToEmpty
	Luminosity       *dbusPropertyDeviceLuminosity
	Voltage          *dbusPropertyDeviceVoltage
	EnergyRate       *dbusPropertyDeviceEnergyRate
	EnergyFullDesign *dbusPropertyDeviceEnergyFullDesign
	EnergyFull       *dbusPropertyDeviceEnergyFull
	EnergyEmpty      *dbusPropertyDeviceEnergyEmpty
	Energy           *dbusPropertyDeviceEnergy
	Online           *dbusPropertyDeviceOnline
	HasStatistics    *dbusPropertyDeviceHasStatistics
	HasHistory       *dbusPropertyDeviceHasHistory
	PowerSupply      *dbusPropertyDevicePowerSupply
	Type             *dbusPropertyDeviceType
	UpdateTime       *dbusPropertyDeviceUpdateTime
	Serial           *dbusPropertyDeviceSerial
	Model            *dbusPropertyDeviceModel
	Vendor           *dbusPropertyDeviceVendor
	NativePath       *dbusPropertyDeviceNativePath
}

func (obj *Device) _createSignalChan() <-chan *dbus.Signal {
	obj.signalsLocker.Lock()
	ch := getBus().Signal()
	obj.signals[ch] = struct{}{}
	obj.signalsLocker.Unlock()
	return ch
}
func (obj *Device) _deleteSignalChan(ch <-chan *dbus.Signal) {
	obj.signalsLocker.Lock()
	delete(obj.signals, ch)
	getBus().DetachSignal(ch)
	obj.signalsLocker.Unlock()
}
func DestroyDevice(obj *Device) {
	obj.signalsLocker.Lock()
	for ch, _ := range obj.signals {
		getBus().DetachSignal(ch)
	}
	obj.signalsLocker.Unlock()

	obj.IconName.Reset()
	obj.WarningLevel.Reset()
	obj.Technology.Reset()
	obj.Capacity.Reset()
	obj.IsRechargeable.Reset()
	obj.State.Reset()
	obj.IsPresent.Reset()
	obj.Temperature.Reset()
	obj.Percentage.Reset()
	obj.TimeToFull.Reset()
	obj.TimeToEmpty.Reset()
	obj.Luminosity.Reset()
	obj.Voltage.Reset()
	obj.EnergyRate.Reset()
	obj.EnergyFullDesign.Reset()
	obj.EnergyFull.Reset()
	obj.EnergyEmpty.Reset()
	obj.Energy.Reset()
	obj.Online.Reset()
	obj.HasStatistics.Reset()
	obj.HasHistory.Reset()
	obj.PowerSupply.Reset()
	obj.Type.Reset()
	obj.UpdateTime.Reset()
	obj.Serial.Reset()
	obj.Model.Reset()
	obj.Vendor.Reset()
	obj.NativePath.Reset()
}

func (obj *Device) GetStatistics(type_ string) (data [][]interface{}, _err error) {
	_err = obj.core.Call("org.freedesktop.UPower.Device.GetStatistics", 0, type_).Store(&data)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Device) GetHistory(type_ string, timespan uint32, resolution uint32) (data [][]interface{}, _err error) {
	_err = obj.core.Call("org.freedesktop.UPower.Device.GetHistory", 0, type_, timespan, resolution).Store(&data)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Device) Refresh() (_err error) {
	_err = obj.core.Call("org.freedesktop.UPower.Device.Refresh", 0).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

type dbusPropertyDeviceIconName struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceIconName) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.IconName is not writable")
}

func (this *dbusPropertyDeviceIconName) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyDeviceIconName) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "IconName").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:IconName error:", err, "at org.freedesktop.UPower.Device")
		return *new(string)
	}
}
func (this *dbusPropertyDeviceIconName) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyDeviceWarningLevel struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceWarningLevel) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.WarningLevel is not writable")
}

func (this *dbusPropertyDeviceWarningLevel) Get() uint32 {
	return this.GetValue().(uint32)
}
func (this *dbusPropertyDeviceWarningLevel) GetValue() interface{} /*uint32*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "WarningLevel").Store(&r)
	if err == nil && r.Signature().String() == "u" {
		return r.Value().(uint32)
	} else {
		fmt.Println("dbusProperty:WarningLevel error:", err, "at org.freedesktop.UPower.Device")
		return *new(uint32)
	}
}
func (this *dbusPropertyDeviceWarningLevel) GetType() reflect.Type {
	return reflect.TypeOf((*uint32)(nil)).Elem()
}

type dbusPropertyDeviceTechnology struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceTechnology) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Technology is not writable")
}

func (this *dbusPropertyDeviceTechnology) Get() uint32 {
	return this.GetValue().(uint32)
}
func (this *dbusPropertyDeviceTechnology) GetValue() interface{} /*uint32*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Technology").Store(&r)
	if err == nil && r.Signature().String() == "u" {
		return r.Value().(uint32)
	} else {
		fmt.Println("dbusProperty:Technology error:", err, "at org.freedesktop.UPower.Device")
		return *new(uint32)
	}
}
func (this *dbusPropertyDeviceTechnology) GetType() reflect.Type {
	return reflect.TypeOf((*uint32)(nil)).Elem()
}

type dbusPropertyDeviceCapacity struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceCapacity) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Capacity is not writable")
}

func (this *dbusPropertyDeviceCapacity) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDeviceCapacity) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Capacity").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:Capacity error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDeviceCapacity) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDeviceIsRechargeable struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceIsRechargeable) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.IsRechargeable is not writable")
}

func (this *dbusPropertyDeviceIsRechargeable) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyDeviceIsRechargeable) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "IsRechargeable").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:IsRechargeable error:", err, "at org.freedesktop.UPower.Device")
		return *new(bool)
	}
}
func (this *dbusPropertyDeviceIsRechargeable) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

type dbusPropertyDeviceState struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceState) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.State is not writable")
}

func (this *dbusPropertyDeviceState) Get() uint32 {
	return this.GetValue().(uint32)
}
func (this *dbusPropertyDeviceState) GetValue() interface{} /*uint32*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "State").Store(&r)
	if err == nil && r.Signature().String() == "u" {
		return r.Value().(uint32)
	} else {
		fmt.Println("dbusProperty:State error:", err, "at org.freedesktop.UPower.Device")
		return *new(uint32)
	}
}
func (this *dbusPropertyDeviceState) GetType() reflect.Type {
	return reflect.TypeOf((*uint32)(nil)).Elem()
}

type dbusPropertyDeviceIsPresent struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceIsPresent) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.IsPresent is not writable")
}

func (this *dbusPropertyDeviceIsPresent) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyDeviceIsPresent) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "IsPresent").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:IsPresent error:", err, "at org.freedesktop.UPower.Device")
		return *new(bool)
	}
}
func (this *dbusPropertyDeviceIsPresent) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

type dbusPropertyDeviceTemperature struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceTemperature) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Temperature is not writable")
}

func (this *dbusPropertyDeviceTemperature) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDeviceTemperature) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Temperature").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:Temperature error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDeviceTemperature) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDevicePercentage struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDevicePercentage) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Percentage is not writable")
}

func (this *dbusPropertyDevicePercentage) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDevicePercentage) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Percentage").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:Percentage error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDevicePercentage) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDeviceTimeToFull struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceTimeToFull) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.TimeToFull is not writable")
}

func (this *dbusPropertyDeviceTimeToFull) Get() int64 {
	return this.GetValue().(int64)
}
func (this *dbusPropertyDeviceTimeToFull) GetValue() interface{} /*int64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "TimeToFull").Store(&r)
	if err == nil && r.Signature().String() == "x" {
		return r.Value().(int64)
	} else {
		fmt.Println("dbusProperty:TimeToFull error:", err, "at org.freedesktop.UPower.Device")
		return *new(int64)
	}
}
func (this *dbusPropertyDeviceTimeToFull) GetType() reflect.Type {
	return reflect.TypeOf((*int64)(nil)).Elem()
}

type dbusPropertyDeviceTimeToEmpty struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceTimeToEmpty) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.TimeToEmpty is not writable")
}

func (this *dbusPropertyDeviceTimeToEmpty) Get() int64 {
	return this.GetValue().(int64)
}
func (this *dbusPropertyDeviceTimeToEmpty) GetValue() interface{} /*int64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "TimeToEmpty").Store(&r)
	if err == nil && r.Signature().String() == "x" {
		return r.Value().(int64)
	} else {
		fmt.Println("dbusProperty:TimeToEmpty error:", err, "at org.freedesktop.UPower.Device")
		return *new(int64)
	}
}
func (this *dbusPropertyDeviceTimeToEmpty) GetType() reflect.Type {
	return reflect.TypeOf((*int64)(nil)).Elem()
}

type dbusPropertyDeviceLuminosity struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceLuminosity) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Luminosity is not writable")
}

func (this *dbusPropertyDeviceLuminosity) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDeviceLuminosity) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Luminosity").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:Luminosity error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDeviceLuminosity) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDeviceVoltage struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceVoltage) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Voltage is not writable")
}

func (this *dbusPropertyDeviceVoltage) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDeviceVoltage) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Voltage").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:Voltage error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDeviceVoltage) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDeviceEnergyRate struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceEnergyRate) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.EnergyRate is not writable")
}

func (this *dbusPropertyDeviceEnergyRate) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDeviceEnergyRate) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "EnergyRate").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:EnergyRate error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDeviceEnergyRate) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDeviceEnergyFullDesign struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceEnergyFullDesign) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.EnergyFullDesign is not writable")
}

func (this *dbusPropertyDeviceEnergyFullDesign) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDeviceEnergyFullDesign) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "EnergyFullDesign").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:EnergyFullDesign error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDeviceEnergyFullDesign) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDeviceEnergyFull struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceEnergyFull) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.EnergyFull is not writable")
}

func (this *dbusPropertyDeviceEnergyFull) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDeviceEnergyFull) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "EnergyFull").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:EnergyFull error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDeviceEnergyFull) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDeviceEnergyEmpty struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceEnergyEmpty) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.EnergyEmpty is not writable")
}

func (this *dbusPropertyDeviceEnergyEmpty) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDeviceEnergyEmpty) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "EnergyEmpty").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:EnergyEmpty error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDeviceEnergyEmpty) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDeviceEnergy struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceEnergy) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Energy is not writable")
}

func (this *dbusPropertyDeviceEnergy) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyDeviceEnergy) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Energy").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:Energy error:", err, "at org.freedesktop.UPower.Device")
		return *new(float64)
	}
}
func (this *dbusPropertyDeviceEnergy) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyDeviceOnline struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceOnline) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Online is not writable")
}

func (this *dbusPropertyDeviceOnline) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyDeviceOnline) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Online").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:Online error:", err, "at org.freedesktop.UPower.Device")
		return *new(bool)
	}
}
func (this *dbusPropertyDeviceOnline) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

type dbusPropertyDeviceHasStatistics struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceHasStatistics) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.HasStatistics is not writable")
}

func (this *dbusPropertyDeviceHasStatistics) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyDeviceHasStatistics) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "HasStatistics").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:HasStatistics error:", err, "at org.freedesktop.UPower.Device")
		return *new(bool)
	}
}
func (this *dbusPropertyDeviceHasStatistics) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

type dbusPropertyDeviceHasHistory struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceHasHistory) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.HasHistory is not writable")
}

func (this *dbusPropertyDeviceHasHistory) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyDeviceHasHistory) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "HasHistory").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:HasHistory error:", err, "at org.freedesktop.UPower.Device")
		return *new(bool)
	}
}
func (this *dbusPropertyDeviceHasHistory) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

type dbusPropertyDevicePowerSupply struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDevicePowerSupply) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.PowerSupply is not writable")
}

func (this *dbusPropertyDevicePowerSupply) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyDevicePowerSupply) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "PowerSupply").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:PowerSupply error:", err, "at org.freedesktop.UPower.Device")
		return *new(bool)
	}
}
func (this *dbusPropertyDevicePowerSupply) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

type dbusPropertyDeviceType struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceType) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Type is not writable")
}

func (this *dbusPropertyDeviceType) Get() uint32 {
	return this.GetValue().(uint32)
}
func (this *dbusPropertyDeviceType) GetValue() interface{} /*uint32*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Type").Store(&r)
	if err == nil && r.Signature().String() == "u" {
		return r.Value().(uint32)
	} else {
		fmt.Println("dbusProperty:Type error:", err, "at org.freedesktop.UPower.Device")
		return *new(uint32)
	}
}
func (this *dbusPropertyDeviceType) GetType() reflect.Type {
	return reflect.TypeOf((*uint32)(nil)).Elem()
}

type dbusPropertyDeviceUpdateTime struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceUpdateTime) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.UpdateTime is not writable")
}

func (this *dbusPropertyDeviceUpdateTime) Get() uint64 {
	return this.GetValue().(uint64)
}
func (this *dbusPropertyDeviceUpdateTime) GetValue() interface{} /*uint64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "UpdateTime").Store(&r)
	if err == nil && r.Signature().String() == "t" {
		return r.Value().(uint64)
	} else {
		fmt.Println("dbusProperty:UpdateTime error:", err, "at org.freedesktop.UPower.Device")
		return *new(uint64)
	}
}
func (this *dbusPropertyDeviceUpdateTime) GetType() reflect.Type {
	return reflect.TypeOf((*uint64)(nil)).Elem()
}

type dbusPropertyDeviceSerial struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceSerial) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Serial is not writable")
}

func (this *dbusPropertyDeviceSerial) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyDeviceSerial) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Serial").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:Serial error:", err, "at org.freedesktop.UPower.Device")
		return *new(string)
	}
}
func (this *dbusPropertyDeviceSerial) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyDeviceModel struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceModel) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Model is not writable")
}

func (this *dbusPropertyDeviceModel) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyDeviceModel) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Model").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:Model error:", err, "at org.freedesktop.UPower.Device")
		return *new(string)
	}
}
func (this *dbusPropertyDeviceModel) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyDeviceVendor struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceVendor) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.Vendor is not writable")
}

func (this *dbusPropertyDeviceVendor) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyDeviceVendor) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "Vendor").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:Vendor error:", err, "at org.freedesktop.UPower.Device")
		return *new(string)
	}
}
func (this *dbusPropertyDeviceVendor) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyDeviceNativePath struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyDeviceNativePath) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Device.NativePath is not writable")
}

func (this *dbusPropertyDeviceNativePath) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyDeviceNativePath) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Device", "NativePath").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:NativePath error:", err, "at org.freedesktop.UPower.Device")
		return *new(string)
	}
}
func (this *dbusPropertyDeviceNativePath) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

func NewDevice(destName string, path dbus.ObjectPath) (*Device, error) {
	if !path.IsValid() {
		return nil, errors.New("The path of '" + string(path) + "' is invalid.")
	}

	core := getBus().Object(destName, path)

	obj := &Device{Path: path, DestName: destName, core: core, signals: make(map[<-chan *dbus.Signal]struct{})}

	obj.IconName = &dbusPropertyDeviceIconName{&property.BaseObserver{}, core}
	obj.WarningLevel = &dbusPropertyDeviceWarningLevel{&property.BaseObserver{}, core}
	obj.Technology = &dbusPropertyDeviceTechnology{&property.BaseObserver{}, core}
	obj.Capacity = &dbusPropertyDeviceCapacity{&property.BaseObserver{}, core}
	obj.IsRechargeable = &dbusPropertyDeviceIsRechargeable{&property.BaseObserver{}, core}
	obj.State = &dbusPropertyDeviceState{&property.BaseObserver{}, core}
	obj.IsPresent = &dbusPropertyDeviceIsPresent{&property.BaseObserver{}, core}
	obj.Temperature = &dbusPropertyDeviceTemperature{&property.BaseObserver{}, core}
	obj.Percentage = &dbusPropertyDevicePercentage{&property.BaseObserver{}, core}
	obj.TimeToFull = &dbusPropertyDeviceTimeToFull{&property.BaseObserver{}, core}
	obj.TimeToEmpty = &dbusPropertyDeviceTimeToEmpty{&property.BaseObserver{}, core}
	obj.Luminosity = &dbusPropertyDeviceLuminosity{&property.BaseObserver{}, core}
	obj.Voltage = &dbusPropertyDeviceVoltage{&property.BaseObserver{}, core}
	obj.EnergyRate = &dbusPropertyDeviceEnergyRate{&property.BaseObserver{}, core}
	obj.EnergyFullDesign = &dbusPropertyDeviceEnergyFullDesign{&property.BaseObserver{}, core}
	obj.EnergyFull = &dbusPropertyDeviceEnergyFull{&property.BaseObserver{}, core}
	obj.EnergyEmpty = &dbusPropertyDeviceEnergyEmpty{&property.BaseObserver{}, core}
	obj.Energy = &dbusPropertyDeviceEnergy{&property.BaseObserver{}, core}
	obj.Online = &dbusPropertyDeviceOnline{&property.BaseObserver{}, core}
	obj.HasStatistics = &dbusPropertyDeviceHasStatistics{&property.BaseObserver{}, core}
	obj.HasHistory = &dbusPropertyDeviceHasHistory{&property.BaseObserver{}, core}
	obj.PowerSupply = &dbusPropertyDevicePowerSupply{&property.BaseObserver{}, core}
	obj.Type = &dbusPropertyDeviceType{&property.BaseObserver{}, core}
	obj.UpdateTime = &dbusPropertyDeviceUpdateTime{&property.BaseObserver{}, core}
	obj.Serial = &dbusPropertyDeviceSerial{&property.BaseObserver{}, core}
	obj.Model = &dbusPropertyDeviceModel{&property.BaseObserver{}, core}
	obj.Vendor = &dbusPropertyDeviceVendor{&property.BaseObserver{}, core}
	obj.NativePath = &dbusPropertyDeviceNativePath{&property.BaseObserver{}, core}

	getBus().BusObject().Call("org.freedesktop.DBus.AddMatch", 0, "type='signal',path='"+string(path)+"',interface='org.freedesktop.DBus.Properties',sender='"+destName+"',member='PropertiesChanged'")
	getBus().BusObject().Call("org.freedesktop.DBus.AddMatch", 0, "type='signal',path='"+string(path)+"',interface='org.freedesktop.UPower.Device',sender='"+destName+"',member='PropertiesChanged'")
	sigChan := obj._createSignalChan()
	go func() {
		typeString := reflect.TypeOf("")
		typeKeyValues := reflect.TypeOf(map[string]dbus.Variant{})
		typeArrayValues := reflect.TypeOf([]string{})
		for v := range sigChan {
			if v.Name == "org.freedesktop.DBus.Properties.PropertiesChanged" &&
				len(v.Body) == 3 &&
				reflect.TypeOf(v.Body[0]) == typeString &&
				reflect.TypeOf(v.Body[1]) == typeKeyValues &&
				reflect.TypeOf(v.Body[2]) == typeArrayValues &&
				v.Body[0].(string) == "org.freedesktop.UPower.Device" {
				props := v.Body[1].(map[string]dbus.Variant)
				for key, _ := range props {
					if false {
					} else if key == "IconName" {
						obj.IconName.Notify()

					} else if key == "WarningLevel" {
						obj.WarningLevel.Notify()

					} else if key == "Technology" {
						obj.Technology.Notify()

					} else if key == "Capacity" {
						obj.Capacity.Notify()

					} else if key == "IsRechargeable" {
						obj.IsRechargeable.Notify()

					} else if key == "State" {
						obj.State.Notify()

					} else if key == "IsPresent" {
						obj.IsPresent.Notify()

					} else if key == "Temperature" {
						obj.Temperature.Notify()

					} else if key == "Percentage" {
						obj.Percentage.Notify()

					} else if key == "TimeToFull" {
						obj.TimeToFull.Notify()

					} else if key == "TimeToEmpty" {
						obj.TimeToEmpty.Notify()

					} else if key == "Luminosity" {
						obj.Luminosity.Notify()

					} else if key == "Voltage" {
						obj.Voltage.Notify()

					} else if key == "EnergyRate" {
						obj.EnergyRate.Notify()

					} else if key == "EnergyFullDesign" {
						obj.EnergyFullDesign.Notify()

					} else if key == "EnergyFull" {
						obj.EnergyFull.Notify()

					} else if key == "EnergyEmpty" {
						obj.EnergyEmpty.Notify()

					} else if key == "Energy" {
						obj.Energy.Notify()

					} else if key == "Online" {
						obj.Online.Notify()

					} else if key == "HasStatistics" {
						obj.HasStatistics.Notify()

					} else if key == "HasHistory" {
						obj.HasHistory.Notify()

					} else if key == "PowerSupply" {
						obj.PowerSupply.Notify()

					} else if key == "Type" {
						obj.Type.Notify()

					} else if key == "UpdateTime" {
						obj.UpdateTime.Notify()

					} else if key == "Serial" {
						obj.Serial.Notify()

					} else if key == "Model" {
						obj.Model.Notify()

					} else if key == "Vendor" {
						obj.Vendor.Notify()

					} else if key == "NativePath" {
						obj.NativePath.Notify()
					}
				}
			} else if v.Name == "org.freedesktop.UPower.Device.PropertiesChanged" && len(v.Body) == 1 && reflect.TypeOf(v.Body[0]) == typeKeyValues {
				for key, _ := range v.Body[0].(map[string]dbus.Variant) {
					if false {
					} else if key == "IconName" {
						obj.IconName.Notify()

					} else if key == "WarningLevel" {
						obj.WarningLevel.Notify()

					} else if key == "Technology" {
						obj.Technology.Notify()

					} else if key == "Capacity" {
						obj.Capacity.Notify()

					} else if key == "IsRechargeable" {
						obj.IsRechargeable.Notify()

					} else if key == "State" {
						obj.State.Notify()

					} else if key == "IsPresent" {
						obj.IsPresent.Notify()

					} else if key == "Temperature" {
						obj.Temperature.Notify()

					} else if key == "Percentage" {
						obj.Percentage.Notify()

					} else if key == "TimeToFull" {
						obj.TimeToFull.Notify()

					} else if key == "TimeToEmpty" {
						obj.TimeToEmpty.Notify()

					} else if key == "Luminosity" {
						obj.Luminosity.Notify()

					} else if key == "Voltage" {
						obj.Voltage.Notify()

					} else if key == "EnergyRate" {
						obj.EnergyRate.Notify()

					} else if key == "EnergyFullDesign" {
						obj.EnergyFullDesign.Notify()

					} else if key == "EnergyFull" {
						obj.EnergyFull.Notify()

					} else if key == "EnergyEmpty" {
						obj.EnergyEmpty.Notify()

					} else if key == "Energy" {
						obj.Energy.Notify()

					} else if key == "Online" {
						obj.Online.Notify()

					} else if key == "HasStatistics" {
						obj.HasStatistics.Notify()

					} else if key == "HasHistory" {
						obj.HasHistory.Notify()

					} else if key == "PowerSupply" {
						obj.PowerSupply.Notify()

					} else if key == "Type" {
						obj.Type.Notify()

					} else if key == "UpdateTime" {
						obj.UpdateTime.Notify()

					} else if key == "Serial" {
						obj.Serial.Notify()

					} else if key == "Model" {
						obj.Model.Notify()

					} else if key == "Vendor" {
						obj.Vendor.Notify()

					} else if key == "NativePath" {
						obj.NativePath.Notify()
					}
				}
			}
		}
	}()

	runtime.SetFinalizer(obj, func(_obj *Device) { DestroyDevice(_obj) })
	return obj, nil
}
