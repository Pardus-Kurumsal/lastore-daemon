/*This file is automatically generated by pkg.deepin.io/dbus-generator. Don't edit it*/
package upower

import "pkg.deepin.io/lib/dbus"
import "pkg.deepin.io/lib/dbus/property"
import "reflect"
import "sync"
import "runtime"
import "fmt"
import "errors"

/*prevent compile error*/
var _ = fmt.Println
var _ = runtime.SetFinalizer
var _ = sync.NewCond
var _ = reflect.TypeOf
var _ = property.BaseObserver{}

type Wakeups struct {
	Path     dbus.ObjectPath
	DestName string
	core     *dbus.Object

	signals       map[<-chan *dbus.Signal]struct{}
	signalsLocker sync.Mutex

	HasCapability *dbusPropertyWakeupsHasCapability
}

func (obj *Wakeups) _createSignalChan() <-chan *dbus.Signal {
	obj.signalsLocker.Lock()
	ch := getBus().Signal()
	obj.signals[ch] = struct{}{}
	obj.signalsLocker.Unlock()
	return ch
}
func (obj *Wakeups) _deleteSignalChan(ch <-chan *dbus.Signal) {
	obj.signalsLocker.Lock()
	delete(obj.signals, ch)
	getBus().DetachSignal(ch)
	obj.signalsLocker.Unlock()
}
func DestroyWakeups(obj *Wakeups) {
	obj.signalsLocker.Lock()
	for ch, _ := range obj.signals {
		getBus().DetachSignal(ch)
	}
	obj.signalsLocker.Unlock()

	obj.HasCapability.Reset()
}

func (obj *Wakeups) GetData() (data [][]interface{}, _err error) {
	_err = obj.core.Call("org.freedesktop.UPower.Wakeups.GetData", 0).Store(&data)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Wakeups) GetTotal() (value uint32, _err error) {
	_err = obj.core.Call("org.freedesktop.UPower.Wakeups.GetTotal", 0).Store(&value)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Wakeups) ConnectDataChanged(callback func()) func() {
	__conn.BusObject().Call("org.freedesktop.DBus.AddMatch", 0,
		"type='signal',path='"+string(obj.Path)+"', interface='org.freedesktop.UPower.Wakeups',sender='"+obj.DestName+"',member='DataChanged'")
	sigChan := obj._createSignalChan()
	go func() {
		for v := range sigChan {
			if v.Path != obj.Path || v.Name != "org.freedesktop.UPower.Wakeups.DataChanged" || 0 != len(v.Body) {
				continue
			}

			callback()
		}
	}()
	return func() {
		obj._deleteSignalChan(sigChan)
	}
}

func (obj *Wakeups) ConnectTotalChanged(callback func(arg0 uint32)) func() {
	__conn.BusObject().Call("org.freedesktop.DBus.AddMatch", 0,
		"type='signal',path='"+string(obj.Path)+"', interface='org.freedesktop.UPower.Wakeups',sender='"+obj.DestName+"',member='TotalChanged'")
	sigChan := obj._createSignalChan()
	go func() {
		for v := range sigChan {
			if v.Path != obj.Path || v.Name != "org.freedesktop.UPower.Wakeups.TotalChanged" || 1 != len(v.Body) {
				continue
			}
			if reflect.TypeOf(v.Body[0]) != reflect.TypeOf((*uint32)(nil)).Elem() {
				continue
			}

			callback(v.Body[0].(uint32))
		}
	}()
	return func() {
		obj._deleteSignalChan(sigChan)
	}
}

type dbusPropertyWakeupsHasCapability struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyWakeupsHasCapability) SetValue(notwritable interface{}) {
	fmt.Println("org.freedesktop.UPower.Wakeups.HasCapability is not writable")
}

func (this *dbusPropertyWakeupsHasCapability) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyWakeupsHasCapability) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "org.freedesktop.UPower.Wakeups", "HasCapability").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:HasCapability error:", err, "at org.freedesktop.UPower.Wakeups")
		return *new(bool)
	}
}
func (this *dbusPropertyWakeupsHasCapability) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

func NewWakeups(destName string, path dbus.ObjectPath) (*Wakeups, error) {
	if !path.IsValid() {
		return nil, errors.New("The path of '" + string(path) + "' is invalid.")
	}

	core := getBus().Object(destName, path)

	obj := &Wakeups{Path: path, DestName: destName, core: core, signals: make(map[<-chan *dbus.Signal]struct{})}

	obj.HasCapability = &dbusPropertyWakeupsHasCapability{&property.BaseObserver{}, core}

	getBus().BusObject().Call("org.freedesktop.DBus.AddMatch", 0, "type='signal',path='"+string(path)+"',interface='org.freedesktop.DBus.Properties',sender='"+destName+"',member='PropertiesChanged'")
	getBus().BusObject().Call("org.freedesktop.DBus.AddMatch", 0, "type='signal',path='"+string(path)+"',interface='org.freedesktop.UPower.Wakeups',sender='"+destName+"',member='PropertiesChanged'")
	sigChan := obj._createSignalChan()
	go func() {
		typeString := reflect.TypeOf("")
		typeKeyValues := reflect.TypeOf(map[string]dbus.Variant{})
		typeArrayValues := reflect.TypeOf([]string{})
		for v := range sigChan {
			if v.Name == "org.freedesktop.DBus.Properties.PropertiesChanged" &&
				len(v.Body) == 3 &&
				reflect.TypeOf(v.Body[0]) == typeString &&
				reflect.TypeOf(v.Body[1]) == typeKeyValues &&
				reflect.TypeOf(v.Body[2]) == typeArrayValues &&
				v.Body[0].(string) == "org.freedesktop.UPower.Wakeups" {
				props := v.Body[1].(map[string]dbus.Variant)
				for key, _ := range props {
					if false {
					} else if key == "HasCapability" {
						obj.HasCapability.Notify()
					}
				}
			} else if v.Name == "org.freedesktop.UPower.Wakeups.PropertiesChanged" && len(v.Body) == 1 && reflect.TypeOf(v.Body[0]) == typeKeyValues {
				for key, _ := range v.Body[0].(map[string]dbus.Variant) {
					if false {
					} else if key == "HasCapability" {
						obj.HasCapability.Notify()
					}
				}
			}
		}
	}()

	runtime.SetFinalizer(obj, func(_obj *Wakeups) { DestroyWakeups(_obj) })
	return obj, nil
}
